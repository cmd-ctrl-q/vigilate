<script src="/static/admin/js/pusher.min.js"></script>
<script>

    // connect to pusher server 
    // on every page the user is authenticated, 
    // create pusher variable.
    // get pusher key from PreferenceMap which is inside the session.
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001, 
        forceTLS: false, 
        enabledTransports: ["ws", "wss"],
        disabledTransports: [],
    });

    // subscribe to server 
    let publicChannel = pusher.subscribe("public-channel");

    // look for events
    publicChannel.bind("app-starting", function(data) {
        successAlert(data.message);
    })

    publicChannel.bind("app-stopping", function(data) {
        warningAlert(data.message);

        let scheduledTableExists = !!document.getElementById("schedule-table"); 
        if (scheduledTableExists) {
            let scheduleTable = document.getElementById("schedule-table"); 
            scheduleTable.tBodies[0].innerHTML = ""; // emtpy html 

            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            let newCell = newRow.insertCell(0); 
            newCell.setAttribute("colspan", "5"); 
            newCell.innerHTML = "No scheduled checks!"; 
        }
    })

    publicChannel.bind("host-service-status-changed", function(data) {
        //successAlert(data.message); 
        attention.toast({
            msg: data.message, 
            icon: 'info', 
            timer: 30000, 
            showCloseButton: true, 
        })

        // delete from if it exists 
        deleteHostServiceRow(data.host_service_id);

       // add new table if exstis
        updateHostServiceRow(data);
    })

    function deleteHostServiceRow(hostServiceID) {

        // remove existing table row if exists 
        let exists = !!document.getElementById("host-service-" + hostServiceID); // does this element exist using !!
        // somewhere on the currently open browser window, there exists and id with 'host-service-{id}'
        if (exists) {
            let row = document.getElementById("host-service-" + hostServiceID);
            // go to element you just found, find its parent, and remove the child that matches the syntax
            row.parentNode.removeChild(row);

            // if this was the last row, add a "no services" row. 
            // dont know which table might exist, so check them all.

            // first, set up an array with the appropriate status names 
            let tables = ["healthy", "pending", "warning", "problem"];

            // use for loop so dont have to write four functions. 
            for (let i = 0; i < tables.length; i++) {
                // check to see if the <table> element exists by the id name
                let currentTableExists = !!document.getElementById(tables[i] + "-table"); 
                if (currentTableExists) {
                    //the table element exists, so get a reference to it 
                    let currentTable = document.getElementById(tables[i] + "-table"); 

                    // if the number of rows in the table is one, the only row left is the header, 
                    // so need to insert a "No services" row in the table body. 
                    if (currentTable.rows.length === 1) {
                        let newRow = currentTable.tBodies[0].insertRow(-1); 
                        let newCell = newRow.insertCell(0); 
                        newCell.setAttribute("colspan", "3"); 
                        newCell.innerHTML = "No services"; 
                    }
                }
            }
        }
    }

    function updateHostServiceRow(data) {
        let tableExists = document.getElementById(data.status + "-table");
        if (tableExists) {
            // add row to table 
            console.log("Trying to add row to " + data.status + " table");
            // get reference to table you want to update 
            let tableRef = document.getElementById(data.status + "-table"); 

            let tableContent = tableRef.innerHTML; 
            // check if html table contains "No services" text
            if (tableContent.includes("No services")) {
                // a "No services" row exists, so delete it 
                let rowCount = tableRef.rows.length; 
                for (let i = rowCount - 1; i > 0; i--) {
                    tableRef.deleteRow(i); 
                }
            }

            // insert new row and give it correct id 
            let newRow = tableRef.tBodies[0].insertRow(-1);

            // set attributes for row 
            newRow.setAttribute("id", "host-service-" + data.host_service_id);

            // insert the first <td> 
            let newCell = newRow.insertCell(0); // 0 is 1st position 
            newCell.innerHTML = `
                <span class="${data.icon}"></span> 
                ${data.service_name}
                <span class="badge bg-secondary pointer" onclick="checkNow(${data.host_service_id}, '${data.status}')">
                    Check Now
                </span>
            `;

            // insert second <td> 
            newCell = newRow.insertCell(1); 
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`; 
            } else {
                newCell.innerHTML = "Pending...";
            }

            // insert third <td> 
            newCell = newRow.insertCell(2); 
        }
    }

    publicChannel.bind("host-service-count-changed", function(data) {
        // update count containers 
        let healthyCountExists = !!document.getElementById("healthy_count"); 
        if (healthyCountExists) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
        }
    })

    // events to bind to - cases to look for
    // - service goes down 
    // - services comes up (problem services becomes helathy)
    // - service status changed 
    // - scheduled changed 
    // - monitoring is turned off 
    // - next-run-event changes

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

        document.addEventListener("DOMContentLoaded", function () {
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })

            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }

        document.getElementById("monitoring-live").addEventListener("change", function() {
            let enabled = document.getElementById("monitoring-live").checked;
            if (!enabled) {
                // send user a confirmation that monitoring is off
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result) {
                        if (result) {
                            // want to turn monitoring off
                            console.log("Would turn monitoring off");
                            // set monitoring_live to 0 / off
                            updateSystemPref("monitoring_live", "0")
                            toggleMonitoring(false); // turn monitoring off
                        } else {
                            document.getElementById("monitoring-live").checked = true;
                        }
                    },
                })
            } else {
                // set monitoring_live to "1" / on
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1); // turn monitoring on 
            }
        })
    })

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData(); 
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}");
        // create new xml http request 
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/set-system-pref");
        // send form data 
        ajax.send(formData);
        // listen on change 
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response; 
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData(); 
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}");
        // create new xml http request 
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
        // send form data 
        ajax.send(formData);
        // listen on change 
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response; 
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }
</script>
